{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AKunal2210/Datamining/blob/main/Another_copy_of_CS6405_CS3033_2425_Assignment2.joblib\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8WfrCFmLHxYu"
      },
      "source": [
        "# CS3033/CS6405 - Data Mining - Second Assignment\n",
        "\n",
        "Your Name - Your ID - Your Module Code (CS3033 or CS6405)\n",
        "\n",
        "### Submission\n",
        "\n",
        "You should submit a single .ipnyb file with your python code and analysis electronically via Canvas. Please note that this assignment will account for 25 Marks of your module grade.\n",
        "\n",
        "\n",
        "### Declaration\n",
        "\n",
        "By submitting this assignment. I agree to the following:\n",
        "\n",
        "<font color=\"red\">“I have read and understand the UCC academic policy on plagiarism, and agree to the requirements set out thereby in relation to plagiarism and referencing. I confirm that I have referenced and acknowledged properly all sources used in the preparation of this assignment.\n",
        "I declare that this assignment is entirely my own work based on my personal study. I further declare that I have not engaged the services of another to either assist me in, or complete this assignment”</font>Physical fatigue significantly impacts performance, safety, and health in domains such as sports, rehabilitation, and workplace ergonomics. Traditional methods for estimating fatigue, such as subjective self-reports, often lack accuracy and real-time applicability. Leveraging wearable sensors like Inertial Measurement Units (IMU) and Electromyography (EMG) provides objective biomechanical data, capturing kinematic and neuromuscular changes during repetitive or prolonged physical activities.\n",
        "\n",
        "The provided dataset was collected from 27 physically active participants performing shoulder internal rotation (IR) and external rotation (ER) exercises at varying resistance levels (30-40%, 40-50%, and 50-60% of their maximal voluntary contraction).\n",
        "Your task is to develop a regression-based machine learning model to estimate perceived fatigue (Borg RPE scores) using the provided sensor data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oav9G1WSJ1nH"
      },
      "source": [
        "## Data Preparation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "DE0kM0QsJ1En",
        "outputId": "1a615749-3570-47a9-a34c-76d00e56d0e4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Subject  Repetition  X_Shoulder_acc_MPSD  X_Shoulder_acc_Freq_MPSD  \\\n",
              "0           1           1             2068.313                     0.000   \n",
              "1           1           2              150.884                     0.699   \n",
              "2           1           3              342.205                     0.000   \n",
              "3           1           4              574.134                     0.000   \n",
              "4           1           5              146.332                     1.993   \n",
              "...       ...         ...                  ...                       ...   \n",
              "2726        9           9             8935.455                     0.000   \n",
              "2727        9          10              928.923                    10.169   \n",
              "2728        9          11             2661.337                     0.000   \n",
              "2729        9          12             2592.713                     0.000   \n",
              "2730        9          13             8480.743                     0.000   \n",
              "\n",
              "      X_Shoulder_acc_Power_Dominant_Band  X_Shoulder_acc_Ratio_Dominant_Band  \\\n",
              "0                                  0.000                               0.000   \n",
              "1                                150.884                               0.183   \n",
              "2                                  0.000                               0.000   \n",
              "3                                  0.000                               0.000   \n",
              "4                                146.332                               0.123   \n",
              "...                                  ...                                 ...   \n",
              "2726                               0.000                               0.000   \n",
              "2727                            2014.835                               0.337   \n",
              "2728                               0.000                               0.000   \n",
              "2729                               0.000                               0.000   \n",
              "2730                               0.000                               0.000   \n",
              "\n",
              "      X_Shoulder_acc_Total_LowFreq_Power  X_Shoulder_acc_Total_HighFreq_Power  \\\n",
              "0                               2318.602                              154.645   \n",
              "1                                503.764                              322.154   \n",
              "2                                862.122                              197.057   \n",
              "3                               1007.744                              195.604   \n",
              "4                                826.328                              364.276   \n",
              "...                                  ...                                  ...   \n",
              "2726                            9467.488                             2650.489   \n",
              "2727                            1874.649                             4112.847   \n",
              "2728                            3213.227                             1701.099   \n",
              "2729                            3244.102                             3519.449   \n",
              "2730                            9414.083                             1879.811   \n",
              "\n",
              "      X_Shoulder_acc_LowHigh_FreqRatio  X_Shoulder_acc_Total_Power  ...  \\\n",
              "0                               14.993                    2473.247  ...   \n",
              "1                                1.564                     825.919  ...   \n",
              "2                                4.375                    1059.179  ...   \n",
              "3                                5.152                    1203.347  ...   \n",
              "4                                2.268                    1190.603  ...   \n",
              "...                                ...                         ...  ...   \n",
              "2726                             3.572                   12117.977  ...   \n",
              "2727                             0.456                    5987.496  ...   \n",
              "2728                             1.889                    4914.326  ...   \n",
              "2729                             0.922                    6763.551  ...   \n",
              "2730                             5.008                   11293.894  ...   \n",
              "\n",
              "      Magnitude_Palm_gyr_rtVar_Max  Magnitude_Palm_gyr_rtVar_Min  \\\n",
              "0                            0.153                        -0.170   \n",
              "1                            0.148                        -0.196   \n",
              "2                            0.104                        -0.107   \n",
              "3                            0.149                        -0.177   \n",
              "4                            0.160                        -0.197   \n",
              "...                            ...                           ...   \n",
              "2726                         0.228                        -0.206   \n",
              "2727                         0.112                        -0.186   \n",
              "2728                         0.150                        -0.118   \n",
              "2729                         0.202                        -0.176   \n",
              "2730                         0.196                        -0.110   \n",
              "\n",
              "      Magnitude_Palm_gyr_rtVar_Range  Magnitude_Palm_gyr_rtVar_RMS  \\\n",
              "0                              0.324                         0.051   \n",
              "1                              0.344                         0.056   \n",
              "2                              0.211                         0.040   \n",
              "3                              0.325                         0.056   \n",
              "4                              0.357                         0.058   \n",
              "...                              ...                           ...   \n",
              "2726                           0.433                         0.062   \n",
              "2727                           0.298                         0.054   \n",
              "2728                           0.268                         0.051   \n",
              "2729                           0.377                         0.058   \n",
              "2730                           0.305                         0.053   \n",
              "\n",
              "      Magnitude_Palm_gyr_rtVar_Energy  Magnitude_Palm_gyr_rtVar_IQR  \\\n",
              "0                               0.797                         0.059   \n",
              "1                               0.892                         0.064   \n",
              "2                               0.479                         0.051   \n",
              "3                               0.908                         0.069   \n",
              "4                               1.018                         0.069   \n",
              "...                               ...                           ...   \n",
              "2726                            0.902                         0.068   \n",
              "2727                            0.675                         0.068   \n",
              "2728                            0.594                         0.071   \n",
              "2729                            0.751                         0.059   \n",
              "2730                            0.685                         0.070   \n",
              "\n",
              "      Magnitude_Palm_gyr_rtVar_Skewness  Magnitude_Palm_gyr_rtVar_Kurtosis  \\\n",
              "0                                -0.465                              1.233   \n",
              "1                                -0.184                              0.645   \n",
              "2                                 0.007                              0.133   \n",
              "3                                -0.240                              0.136   \n",
              "4                                -0.144                              0.439   \n",
              "...                                 ...                                ...   \n",
              "2726                              0.148                              1.529   \n",
              "2727                             -0.414                              0.162   \n",
              "2728                              0.348                             -0.082   \n",
              "2729                              0.282                              0.897   \n",
              "2730                              0.305                              0.579   \n",
              "\n",
              "      RepetitionDuration_Palm_gyr_rtVar    Borg  \n",
              "0                                  3.10   9.355  \n",
              "1                                  2.86   9.653  \n",
              "2                                  2.99   9.946  \n",
              "3                                  2.91  10.240  \n",
              "4                                  3.01  10.536  \n",
              "...                                 ...     ...  \n",
              "2726                               2.35  13.635  \n",
              "2727                               2.36  14.106  \n",
              "2728                               2.31  14.573  \n",
              "2729                               2.23  15.014  \n",
              "2730                               2.44  15.247  \n",
              "\n",
              "[2731 rows x 2173 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd496f16-b466-4d2f-81ec-5ebfd71683f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Subject</th>\n",
              "      <th>Repetition</th>\n",
              "      <th>X_Shoulder_acc_MPSD</th>\n",
              "      <th>X_Shoulder_acc_Freq_MPSD</th>\n",
              "      <th>X_Shoulder_acc_Power_Dominant_Band</th>\n",
              "      <th>X_Shoulder_acc_Ratio_Dominant_Band</th>\n",
              "      <th>X_Shoulder_acc_Total_LowFreq_Power</th>\n",
              "      <th>X_Shoulder_acc_Total_HighFreq_Power</th>\n",
              "      <th>X_Shoulder_acc_LowHigh_FreqRatio</th>\n",
              "      <th>X_Shoulder_acc_Total_Power</th>\n",
              "      <th>...</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_Max</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_Min</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_Range</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_RMS</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_Energy</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_IQR</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_Skewness</th>\n",
              "      <th>Magnitude_Palm_gyr_rtVar_Kurtosis</th>\n",
              "      <th>RepetitionDuration_Palm_gyr_rtVar</th>\n",
              "      <th>Borg</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2068.313</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>2318.602</td>\n",
              "      <td>154.645</td>\n",
              "      <td>14.993</td>\n",
              "      <td>2473.247</td>\n",
              "      <td>...</td>\n",
              "      <td>0.153</td>\n",
              "      <td>-0.170</td>\n",
              "      <td>0.324</td>\n",
              "      <td>0.051</td>\n",
              "      <td>0.797</td>\n",
              "      <td>0.059</td>\n",
              "      <td>-0.465</td>\n",
              "      <td>1.233</td>\n",
              "      <td>3.10</td>\n",
              "      <td>9.355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>150.884</td>\n",
              "      <td>0.699</td>\n",
              "      <td>150.884</td>\n",
              "      <td>0.183</td>\n",
              "      <td>503.764</td>\n",
              "      <td>322.154</td>\n",
              "      <td>1.564</td>\n",
              "      <td>825.919</td>\n",
              "      <td>...</td>\n",
              "      <td>0.148</td>\n",
              "      <td>-0.196</td>\n",
              "      <td>0.344</td>\n",
              "      <td>0.056</td>\n",
              "      <td>0.892</td>\n",
              "      <td>0.064</td>\n",
              "      <td>-0.184</td>\n",
              "      <td>0.645</td>\n",
              "      <td>2.86</td>\n",
              "      <td>9.653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>342.205</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>862.122</td>\n",
              "      <td>197.057</td>\n",
              "      <td>4.375</td>\n",
              "      <td>1059.179</td>\n",
              "      <td>...</td>\n",
              "      <td>0.104</td>\n",
              "      <td>-0.107</td>\n",
              "      <td>0.211</td>\n",
              "      <td>0.040</td>\n",
              "      <td>0.479</td>\n",
              "      <td>0.051</td>\n",
              "      <td>0.007</td>\n",
              "      <td>0.133</td>\n",
              "      <td>2.99</td>\n",
              "      <td>9.946</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>574.134</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>1007.744</td>\n",
              "      <td>195.604</td>\n",
              "      <td>5.152</td>\n",
              "      <td>1203.347</td>\n",
              "      <td>...</td>\n",
              "      <td>0.149</td>\n",
              "      <td>-0.177</td>\n",
              "      <td>0.325</td>\n",
              "      <td>0.056</td>\n",
              "      <td>0.908</td>\n",
              "      <td>0.069</td>\n",
              "      <td>-0.240</td>\n",
              "      <td>0.136</td>\n",
              "      <td>2.91</td>\n",
              "      <td>10.240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>146.332</td>\n",
              "      <td>1.993</td>\n",
              "      <td>146.332</td>\n",
              "      <td>0.123</td>\n",
              "      <td>826.328</td>\n",
              "      <td>364.276</td>\n",
              "      <td>2.268</td>\n",
              "      <td>1190.603</td>\n",
              "      <td>...</td>\n",
              "      <td>0.160</td>\n",
              "      <td>-0.197</td>\n",
              "      <td>0.357</td>\n",
              "      <td>0.058</td>\n",
              "      <td>1.018</td>\n",
              "      <td>0.069</td>\n",
              "      <td>-0.144</td>\n",
              "      <td>0.439</td>\n",
              "      <td>3.01</td>\n",
              "      <td>10.536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2726</th>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>8935.455</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>9467.488</td>\n",
              "      <td>2650.489</td>\n",
              "      <td>3.572</td>\n",
              "      <td>12117.977</td>\n",
              "      <td>...</td>\n",
              "      <td>0.228</td>\n",
              "      <td>-0.206</td>\n",
              "      <td>0.433</td>\n",
              "      <td>0.062</td>\n",
              "      <td>0.902</td>\n",
              "      <td>0.068</td>\n",
              "      <td>0.148</td>\n",
              "      <td>1.529</td>\n",
              "      <td>2.35</td>\n",
              "      <td>13.635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2727</th>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>928.923</td>\n",
              "      <td>10.169</td>\n",
              "      <td>2014.835</td>\n",
              "      <td>0.337</td>\n",
              "      <td>1874.649</td>\n",
              "      <td>4112.847</td>\n",
              "      <td>0.456</td>\n",
              "      <td>5987.496</td>\n",
              "      <td>...</td>\n",
              "      <td>0.112</td>\n",
              "      <td>-0.186</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.054</td>\n",
              "      <td>0.675</td>\n",
              "      <td>0.068</td>\n",
              "      <td>-0.414</td>\n",
              "      <td>0.162</td>\n",
              "      <td>2.36</td>\n",
              "      <td>14.106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2728</th>\n",
              "      <td>9</td>\n",
              "      <td>11</td>\n",
              "      <td>2661.337</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3213.227</td>\n",
              "      <td>1701.099</td>\n",
              "      <td>1.889</td>\n",
              "      <td>4914.326</td>\n",
              "      <td>...</td>\n",
              "      <td>0.150</td>\n",
              "      <td>-0.118</td>\n",
              "      <td>0.268</td>\n",
              "      <td>0.051</td>\n",
              "      <td>0.594</td>\n",
              "      <td>0.071</td>\n",
              "      <td>0.348</td>\n",
              "      <td>-0.082</td>\n",
              "      <td>2.31</td>\n",
              "      <td>14.573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2729</th>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>2592.713</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>3244.102</td>\n",
              "      <td>3519.449</td>\n",
              "      <td>0.922</td>\n",
              "      <td>6763.551</td>\n",
              "      <td>...</td>\n",
              "      <td>0.202</td>\n",
              "      <td>-0.176</td>\n",
              "      <td>0.377</td>\n",
              "      <td>0.058</td>\n",
              "      <td>0.751</td>\n",
              "      <td>0.059</td>\n",
              "      <td>0.282</td>\n",
              "      <td>0.897</td>\n",
              "      <td>2.23</td>\n",
              "      <td>15.014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2730</th>\n",
              "      <td>9</td>\n",
              "      <td>13</td>\n",
              "      <td>8480.743</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>9414.083</td>\n",
              "      <td>1879.811</td>\n",
              "      <td>5.008</td>\n",
              "      <td>11293.894</td>\n",
              "      <td>...</td>\n",
              "      <td>0.196</td>\n",
              "      <td>-0.110</td>\n",
              "      <td>0.305</td>\n",
              "      <td>0.053</td>\n",
              "      <td>0.685</td>\n",
              "      <td>0.070</td>\n",
              "      <td>0.305</td>\n",
              "      <td>0.579</td>\n",
              "      <td>2.44</td>\n",
              "      <td>15.247</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2731 rows × 2173 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd496f16-b466-4d2f-81ec-5ebfd71683f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fd496f16-b466-4d2f-81ec-5ebfd71683f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fd496f16-b466-4d2f-81ec-5ebfd71683f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1da78a3c-1191-4c90-852c-7ebc73afdd74\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1da78a3c-1191-4c90-852c-7ebc73afdd74')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1da78a3c-1191-4c90-852c-7ebc73afdd74 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7afa340e-a38f-4ad7-a152-aa0f63d35d5c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7afa340e-a38f-4ad7-a152-aa0f63d35d5c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "file_id = '1DP3G49DWVUaRBkn7wssPi6CfY1pTmTQP'\n",
        "url = f'https://drive.google.com/uc?id={file_id}'\n",
        "\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "N8MCvTYTKw4Q",
        "outputId": "602df533-5807-48a7-e753-81759aed5483"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 2
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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wAMPxDPPPJP1rQCAPijzj11OOumkWLVqVWzcuDEiIl544YV44oknora2ttvjOzo6orW1tcsCAPRfmT/5mDdvXrS2tsaRRx4ZAwcOjN27d8fChQvj4osv7vb4hoaG+N73vpf1GABAL5X5k49f/vKXcf/998eyZcvi+eefj3vuuSduueWWuOeee7o9fv78+dHS0lJYmpubsx4JAOhFMn/ycc0118S8efPioosuioiIyZMnx+bNm6OhoSHq6+v/6/jS0tIoLS3NegwAoJfK/MnHu+++GwMGdL3swIEDo7OzM+tbAQB9UOZPPurq6mLhwoUxduzYOProo+Mvf/lL3HrrrXHZZZdlfSsAoA/KPD5uu+22WLBgQXz961+Pbdu2RWVlZXz1q1+N66+/PutbAQB9UObxMWzYsFi0aFEsWrQo60sDAP2A73YBAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBIqqTYAwC9345/7o5X3mzb5+s0bWvr8s8sjD94aJQNGpjZ9YD9T3wAH+iVN9vizNueyOx6c37RmNm1Vs6aHsccWpHZ9YD9T3wAH2j8wUNj5azp+3ydnbt2xz/e3hFjDiqLwQdk87Ri/MFDM7kOkI74AD5Q2aCBmT1dOO7wTC4D9GFeOAUAkhIfAEBS4gMASGq/xMeWLVvii1/8YowYMSLKyspi8uTJsW7duv1xKwCgj8n8hdO33347Tj755KipqYnf/e53cfDBB8fLL78cBx10UNa3AgD6oMzj46abboqqqqq4++67C9vGjRuX9W0AgD4q849dVqxYEccdd1ycf/75MXLkyPjUpz4Vd9555/se39HREa2trV0WAKD/yjw+/va3v8Udd9wRRxxxRDzyyCPxta99LWbPnh333HNPt8c3NDRERUVFYamqqsp6JACgF8nl8/l8lhccNGhQHHfccbF27drCttmzZ8ezzz4bTz755H8d39HRER0dHYX11tbWqKqqipaWligvL89yNABgP2ltbY2KiooP9ed35k8+Ro8eHZMmTeqy7aijjopXX3212+NLS0ujvLy8ywIA9F+Zx8fJJ58cGzZs6LJt48aNcdhhh2V9KwCgD8o8Pq6++up46qmn4gc/+EE0NTXFsmXL4mc/+1lceeWVWd8KAOiDMo+PadOmxYMPPhgPPPBAHHPMMXHjjTfGokWL4uKLL876VgBAH5T5C6f7qqWlJQ488MBobm72/gcA9BHv/cLIO++8ExUVe/4W7Mz/krF9tX379ogIv3ILAH3Q9u3bPzA+et2Tj87Oznjttddi2LBhkcvlij0OkKH3/s/Ik03of/L5fGzfvj0qKytjwIA9v9XR6+ID6L968vcAAP3XfvlWWwCA9yM+AICkxAeQTGlpaXznO9+J0tLSYo8CFJF3PgCApDz5AACSEh8AQFLiAwBISnwAAEmJD2CvXHLJJZHL5QrLiBEj4rTTTosXX3yx2KMBvZz4APbaaaedFq+//nq8/vrrsWrVqigpKYkzzzxzr6/3z3/+M8PpgN5KfAB7rbS0NEaNGhWjRo2KqVOnxrx586K5uTnefPPNiIh46aWX4n/+53+irKwsRowYEZdffnm0tbUVzr/kkkvinHPOiYULF0ZlZWVMnDgxIiLWrl0bU6dOjcGDB8dxxx0Xy5cvj1wuF42NjcX4MYGM9bpvtQX6pra2trjvvvtiwoQJMWLEiGhvb48ZM2bEiSeeGM8++2xs27YtvvzlL8dVV10VS5cuLZy3atWqKC8vj0cffTQi/v39L3V1dXH66afHsmXLYvPmzTFnzpzi/FDAfiE+gL22cuXKGDp0aEREtLe3x+jRo2PlypUxYMCAWLZsWezcuTPuvffeGDJkSERE3H777VFXVxc33XRTHHLIIRERMWTIkLjrrrti0KBBERGxZMmSyOVyceedd8bgwYNj0qRJsWXLlvjKV75SnB8SyJyPXYC9VlNTE42NjdHY2BjPPPNMzJgxI2pra2Pz5s2xfv36mDJlSiE8IiJOPvnk6OzsjA0bNhS2TZ48uRAeEREbNmyIY489NgYPHlzYdvzxx6f5gYAkPPkA9tqQIUNiwoQJhfW77rorKioq4s477+zRNYCPFk8+gMzkcrkYMGBA7NixI4466qh44YUXor29vbD/z3/+cwwYMKDwYml3Jk6cGC+99FJ0dHQUtj377LP7dW4gLfEB7LWOjo7YunVrbN26NdavXx+zZs2Ktra2qKuri4svvjgGDx4c9fX18de//jVWr14ds2bNipkzZxbe9+jOF77whejs7IzLL7881q9fH4888kjccsstEfHvuAH6PvEB7LWHH344Ro8eHaNHj44TTjghnn322fjVr34V1dXV8bGPfSweeeSReOutt2LatGlx3nnnxWc+85m4/fbb93jN8vLyeOihh6KxsTGmTp0a1113XVx//fUREV3eAwH6rlw+n88XewiAPbn//vvj0ksvjZaWligrKyv2OMA+8sIp0Ovce++98YlPfCIOPfTQeOGFF+Laa6+NCy64QHhAPyE+gF5n69atcf3118fWrVtj9OjRcf7558fChQuLPRaQER+7AABJeeEUAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBI6v8CkCSzrz8/O5EAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Label or target variable\n",
        "df['Borg'].plot.box()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MTvkBPQvITf-"
      },
      "source": [
        "# Tasks\n",
        "\n",
        "## Basic models and evaluation\n",
        "\n",
        "Using Scikit-learn, train and evaluate K-NN and decision tree regressors using 70% of the dataset from training and 30% for testing. For this part of the project, we are not interested in optimising the parameters; we just want to get an idea of the dataset.\n",
        "Compare the results of both classifiers and comment on their execution time in the test.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zl0VXO0YH1nG",
        "outputId": "d4552401-7215-4db5-d4f1-88e6b14141e6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "K-Nearest Neighbors Results:\n",
            "Mean Absolute Error: 1.78\n",
            "Root Mean Squared Error: 2.3\n",
            "Accuracy: 0.5\n",
            "Prediction Time: 1.9026 seconds\n",
            "\n",
            "Decision Tree Results:\n",
            "Mean Absolute Error: 2.7\n",
            "Root Mean Squared Error: 3.18\n",
            "Accuracy: 0.04\n",
            "Prediction Time: 0.0665 seconds\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "import time\n",
        "\n",
        "X = df.drop(columns=['Borg', 'Subject', 'Repetition'])\n",
        "y = df['Borg']\n",
        "\n",
        "X_train_raw, X_test_raw, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train_raw)\n",
        "X_test_scaled = scaler.transform(X_test_raw)\n",
        "\n",
        "regressors = {\n",
        "    \"K-Nearest Neighbors\": KNeighborsRegressor(),\n",
        "    \"Decision Tree\": DecisionTreeRegressor(max_depth=1, min_samples_leaf=10, random_state=42)\n",
        "}\n",
        "\n",
        "for name, model in regressors.items():\n",
        "    if name == \"Decision Tree\":\n",
        "        X_train_used = X_train_raw\n",
        "        X_test_used = X_test_raw\n",
        "    else:\n",
        "        X_train_used = X_train_scaled\n",
        "        X_test_used = X_test_scaled\n",
        "\n",
        "    start_train = time.time()\n",
        "    model.fit(X_train_used, y_train)\n",
        "    end_train = time.time()\n",
        "\n",
        "    start_test = time.time()\n",
        "    y_pred = model.predict(X_test_used)\n",
        "    end_test = time.time()\n",
        "\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "    print(f\"\\n{name} Results:\")\n",
        "    print(\"Mean Absolute Error:\", round(mae, 2))\n",
        "    print(\"Root Mean Squared Error:\", round(rmse, 2))\n",
        "    print(\"Accuracy:\", round(r2, 2))\n",
        "    print(\"Prediction Time:\", round(end_test - start_test, 4), \"seconds\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "For this part, I tested and compared two basic regression models: K-Nearest Neighbors (KNN) and a Decision Tree, using a 70/30 training and testing split. The results showed that KNN gave better accuracy overall, with an MAE of 1.78, RMSE of 2.30, and an R² value of 0.50. On the other hand, the Decision Tree model didn’t perform as well, giving an MAE of 2.70, RMSE of 3.18, and a much lower R² score of 0.04. This was expected, since the tree was very shallow (limited to a depth of 1), which caused it to underfit. However, it was much faster in making predictions — only taking 0.0204 seconds, compared to 0.2351 seconds for KNN. So while the Decision Tree was quicker, KNN gave more accurate predictions and ended up being the more useful model for this dataset."
      ],
      "metadata": {
        "id": "tIsGDd86_sEI"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zADpr0f8IcGL"
      },
      "source": [
        "## Robust evaluation\n",
        "\n",
        "In this section, try to improve the accuracy by creating a pipeline. Consider the techniques we have covered during the semester, and try to improve the accuracy of a Decision tree regressor.\n",
        "Your report should provide concrete information of your reasoning; everything should be well-explained.\n",
        "Do not get stressed if the things you try do not improve the accuracy. The key to getting good marks is to show that you evaluated different methods and that you correctly selected the configuration.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tvBZH6ilInsA",
        "outputId": "48ef57aa-f0d9-475d-835b-c3a1716e649b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Final Improved Decision Tree (GroupKFold):\n",
            "Mean Absolute Error: 2.74\n",
            "Root Mean Squared Error: 3.23\n",
            "R² Score: 0.01\n"
          ]
        }
      ],
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import GroupKFold\n",
        "\n",
        "# Prepare features, labels, and subject groups\n",
        "X = df.drop(columns=['Borg', 'Subject', 'Repetition'])\n",
        "y = df['Borg']\n",
        "groups = df['Subject']\n",
        "\n",
        "# Pipeline with scaling and improved Decision Tree\n",
        "model = Pipeline([\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('regressor', DecisionTreeRegressor(\n",
        "        max_depth=1,\n",
        "        min_samples_split=4,\n",
        "        min_samples_leaf=2,\n",
        "        random_state=42))\n",
        "])\n",
        "\n",
        "# Group-based cross-validation\n",
        "cv = GroupKFold(n_splits=5)\n",
        "mae_scores, rmse_scores, r2_scores = [], [], []\n",
        "\n",
        "# Cross-validation loop\n",
        "for train_idx, test_idx in cv.split(X, y, groups):\n",
        "    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n",
        "    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n",
        "\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    mae_scores.append(mean_absolute_error(y_test, y_pred))\n",
        "    rmse_scores.append(np.sqrt(mean_squared_error(y_test, y_pred)))\n",
        "    r2_scores.append(r2_score(y_test, y_pred))\n",
        "\n",
        "# Print results\n",
        "print(\"\\nFinal Improved Decision Tree (GroupKFold):\")\n",
        "print(\"Mean Absolute Error:\", round(np.mean(mae_scores), 2))\n",
        "print(\"Root Mean Squared Error:\", round(np.mean(rmse_scores), 2))\n",
        "print(\"R² Score:\", round(np.mean(r2_scores), 2))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this section, the goal was to improve the accuracy of a Decision Tree Regressor using a robust evaluation setup and a pipeline, incorporating techniques learned throughout the semester. The strategy focused on subject-aware cross-validation, pipeline integration, and basic hyperparameter experimentation.\n",
        "\n",
        "To begin with, a pipeline was constructed using sklearn.pipeline.Pipeline, which combined preprocessing and model training steps. Although Decision Trees are inherently scale-invariant, the StandardScaler was included in the pipeline to maintain consistency and allow flexibility in future extensions (e.g., switching to regressors that are scale-sensitive).\n",
        "\n",
        "The evaluation used GroupKFold with five splits, which ensures that data from the same subject does not leak between training and test sets. This method simulates a more realistic scenario where the model must generalize to unseen individuals rather than overfitting to specific subjects' patterns.\n",
        "\n",
        "A shallow Decision Tree was chosen (with max_depth=1), along with min_samples_split=4 and min_samples_leaf=2. These constraints were intended to control overfitting by forcing the tree to generalize more broadly. However, the model's performance remained modest, achieving an average R² score of 0.01, indicating it struggled to explain variance in the Borg scale target.\n",
        "\n",
        "This experiment highlights how simple Decision Trees may be too rigid to model complex physiological data, especially in subject-independent contexts. While the model underperformed, the process of using a structured pipeline and grouped validation remains valuable. It ensures reproducibility and fairness in performance reporting. The results suggest that for this task, a more expressive model (e.g., ensemble-based trees or boosting methods) may be required."
      ],
      "metadata": {
        "id": "lGb8RrIiwt4k"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FYoMg0EZIrNd"
      },
      "source": [
        "## New classifier\n",
        "\n",
        "Replicate the previous task for a classifier that we did not cover in class (different than K-NN and decision trees). Briefly describe and justify your choice.\n",
        "Try to create the best model for the given dataset.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QRJXrY2hI32F"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import HistGradientBoostingRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.pipeline import make_pipeline\n",
        "import numpy as np\n",
        "\n",
        "# Extract features and target\n",
        "X = df.drop(columns=['Borg', 'Subject', 'Repetition'])\n",
        "y = df['Borg']\n",
        "\n",
        "# Add interaction terms to better capture non-linear patterns\n",
        "poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\n",
        "X_poly = poly.fit_transform(X)\n",
        "\n",
        "# Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X_poly, y, test_size=0.3, random_state=42\n",
        ")\n",
        "\n",
        "# Optimized model\n",
        "final_model = HistGradientBoostingRegressor(\n",
        "    max_iter=1200,\n",
        "    learning_rate=0.008,\n",
        "    max_depth=12,\n",
        "    min_samples_leaf=2,\n",
        "    l2_regularization=0.05,\n",
        "    early_stopping=True,\n",
        "    validation_fraction=0.15,\n",
        "    n_iter_no_change=30,\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "# Train and evaluate\n",
        "final_model.fit(X_train, y_train)\n",
        "y_pred = final_model.predict(X_test)\n",
        "\n",
        "print(\"\\nFinal HistGradientBoosting Regressor:\")\n",
        "print(\"Mean Absolute Error:\", round(mean_absolute_error(y_test, y_pred), 2))\n",
        "print(\"Root Mean Squared Error:\", round(np.sqrt(mean_squared_error(y_test, y_pred)), 2))\n",
        "print(\"R² Score:\", round(r2_score(y_test, y_pred), 2))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "So for this part, I decided to use a model which we didn’t learn in class, the HistGradientBoosting Regressor. It’s from scikit-learn library and it's kind of a upgraded version of the normal gradient boosting. I choosed this model cause it usually gives better accuracy and is also faster than some of the older models like GradientBoostingRegressor.\n",
        "\n",
        "To make the model more better, I used PolynomialFeatures with degree 2, so it can learn interactions between the features. I thought this might help cause maybe some combinations of features explain more about the target than individual features alone. Then I also tried to tune few things like number of iterations, tree depth and learning rate. I added early stopping too, so the model doesn’t overfit and waste time learning when it’s not improving.\n",
        "\n",
        "I splitted the data using 70-30 ratio like before. I tried to improve the accuracy as much as I could, but it still didn’t cross 85%. Still, I think I explored different things and showed I understand how to test and improve models properly."
      ],
      "metadata": {
        "id": "eHgDnetKFOZa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from joblib import dump\n",
        "from google.colab import files\n",
        "\n",
        "dump(model, 'borg_model.joblib')\n",
        "files.download('borg_model.joblib')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "BKrhtNJR0lvb",
        "outputId": "8b8ef68c-4081-4676-c21d-655f870070d4"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-bc8d220340b4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'borg_model.joblib'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'borg_model.joblib'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q01BjiiCJTR4"
      },
      "source": [
        "## Evaluation on unseen instances (Only for CS6405)\n",
        "Save your best model into your github. And create a single code cell that loads it and evaluate it on the following test dataset:\n",
        "https://raw.githubusercontent.com/andvise/DM_Assignment_2425/refs/heads/main/test_data.csv\n",
        "\n",
        "This link currently contains a sample of the training set. The real test set will be released after the submission. I should be able to run the code cell independently and load all the libraries you need as well.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IWx4lyuQI929"
      },
      "outputs": [],
      "source": [
        "from joblib import dump, load\n",
        "from io import BytesIO\n",
        "import requests\n",
        "import pandas as pd\n",
        "\n",
        "# INSERT YOUR MODEL'S URL\n",
        "mLink = 'https://raw.githubusercontent.com/AKunal2210/Datamining/main/borg_model%20(2).joblib'\n",
        "mfile = BytesIO(requests.get(mLink).content)\n",
        "model = load(mfile)\n",
        "\n",
        "df = pd.read_csv(\"https://raw.githubusercontent.com/andvise/DM_Assignment_2425/refs/heads/main/test_data.csv\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9Lx5OKyU-LnW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1cfe1351-8af1-4ca0-c264-1bec61b263ec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Evaluation on Test Dataset:\n",
            "Mean Absolute Error:  2.43\n",
            "Root Mean Squared Error: 2.94\n",
            "accuracy:   0.18\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "from joblib import load\n",
        "from io import BytesIO\n",
        "import requests\n",
        "\n",
        "mLink = 'https://raw.githubusercontent.com/AKunal2210/Datamining/main/borg_model%20(2).joblib'\n",
        "mfile = BytesIO(requests.get(mLink).content)\n",
        "model = load(mfile)\n",
        "\n",
        "df = pd.read_csv(\"https://raw.githubusercontent.com/andvise/DM_Assignment_2425/refs/heads/main/test_data.csv\")\n",
        "\n",
        "X_test = df.drop(columns=['Borg', 'Subject', 'Repetition'])\n",
        "y_test = df['Borg']\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "print(\"Model Evaluation on Test Dataset:\")\n",
        "print(f\"Mean Absolute Error:  {mean_absolute_error(y_test, y_pred):.2f}\")\n",
        "print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test, y_pred)):.2f}\")\n",
        "print(f\"accuracy:   {r2_score(y_test, y_pred):.2f}\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}